{"version":3,"sources":["../food-chain.js"],"names":[],"mappings":";;;;;;IAAM,SAAS;AACA,aADT,SAAS,GACG;8BADZ,SAAS;KACK;;iBADd,SAAS;;eAGL,gBAAC,KAAK,EAAE,GAAG,EAAE;AACf,gBAAI,KAAK,GAAG,GAAG;AAAE,uBAAO,EAAE,CAAC;aAAA,AAE3B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;SACjE;;;eAEI,eAAC,GAAG,EAAE;AACP,gBAAI,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;;AAE1B,oBAAQ,GAAG;AACP,qBAAK,CAAC;AACF,0BAAM,IAAI,QAAQ,CAAC;AACnB,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,4DAA4D,CAAC;AACvE,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,SAAS,GACnB,iCAAiC,CAAC;AAClC,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,QAAQ,GAClB,mCAAmC,CAAC;AACpC,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,QAAQ,GAClB,iCAAiC,CAAC;AAClC,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,SAAS,GACnB,gDAAgD,CAAC;AACjD,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,QAAQ,GAClB,yCAAyC,CAAC;AAC1C,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,IAAI,UAAU,GAAG,0BAA0B,CAAC;AAClD,0BAAM;AAAA,aACb;;AAED,gBAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;AACpB,sBAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;aACvC;;AAED,gBAAI,GAAG,GAAG,CAAC,EAAE;AACT,sBAAM,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;aAC9B;;AAED,mBAAO,MAAM,CAAC;SACjB;;;eAEI,iBAAG;AACJ,mBAAO,qCAAqC,CAAC;SAChD;;;eAEQ,qBAAG;AACR,mBAAO,+DAA+D,CAAC;SAC1E;;;eAEU,qBAAC,GAAG,EAAE;AACb,gBAAI,GAAG,KAAK,CAAC;AAAE,uBAAO,EAAE,CAAC;aAAA,AAEzB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;SAC3D;;;eAES,oBAAC,GAAG,EAAE;AACZ,gBAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,oBAAQ,GAAG;AACP,qBAAK,CAAC;AACF,0BAAM,GAAG,8CAA8C,CAAC;AACxD,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,GAAG,gGAAgG,CAAC;AAC1G,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,GAAG,4CAA4C,CAAC;AACtD,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,GAAG,2CAA2C,CAAC;AACrD,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,GAAG,4CAA4C,CAAC;AACtD,0BAAM;AAAA,AACV,qBAAK,CAAC;AACF,0BAAM,GAAG,4CAA4C,CAAC;AACtD,0BAAM;AAAA,aACb;;AAED,mBAAO,MAAM,CAAC;SACjB;;;WA9FC,SAAS;;;AAiGf,MAAM,CAAC,OAAO,GAAG,IAAI,SAAS,EAAE,CAAC","file":"food-chain.js","sourcesContent":["class FoodChain {\n    constructor() {}\n\n    verses(start, end) {\n        if (start > end) return \"\";\n\n        return this.verse(start) + '\\n' + this.verses(start + 1, end);\n    }\n\n    verse(num) {\n        let result = this.intro();\n\n        switch (num) {\n            case 1:\n                result += \"fly.\\n\";\n                break;\n            case 2:\n                result += \"spider.\\nIt wriggled and jiggled and tickled inside her.\\n\";\n                break;\n            case 3:\n                result += \"bird.\\n\" +\n                \"How absurd to swallow a bird!\\n\";\n                break;\n            case 4:\n                result += \"cat.\\n\" +\n                \"Imagine that, to swallow a cat!\\n\";\n                break;\n            case 5:\n                result += \"dog.\\n\" +\n                \"What a hog, to swallow a dog!\\n\";\n                break;\n            case 6:\n                result += \"goat.\\n\" +\n                \"Just opened her throat and swallowed a goat!\\n\";\n                break;\n            case 7:\n                result += \"cow.\\n\" +\n                \"I don't know how she swallowed a cow!\\n\";\n                break;\n            case 8:\n                result += \"horse.\\n\" + \"She's dead, of course!\\n\";\n                break;\n        }\n\n        if (num > 1 && num < 8) {\n            result += this.getRefrains(num - 1);\n        }\n\n        if (num < 8) {\n            result += this.flyEnding();\n        }\n\n        return result;\n    }\n\n    intro() {\n        return \"I know an old lady who swallowed a \";\n    }\n\n    flyEnding() {\n        return \"I don't know why she swallowed the fly. Perhaps she'll die.\\n\";\n    }\n\n    getRefrains(num) {\n        if (num === 0) return \"\";\n\n        return this.getRefrain(num) + this.getRefrains(num - 1);\n    }\n\n    getRefrain(num) {\n        let result = \"\";\n\n        switch (num) {\n            case 1:\n                result = \"She swallowed the spider to catch the fly.\\n\";\n                break;\n            case 2:\n                result = \"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n\";\n                break;\n            case 3:\n                result = \"She swallowed the cat to catch the bird.\\n\";\n                break;\n            case 4:\n                result = \"She swallowed the dog to catch the cat.\\n\";\n                break;\n            case 5:\n                result = \"She swallowed the goat to catch the dog.\\n\";\n                break;\n            case 6:\n                result = \"She swallowed the cow to catch the goat.\\n\";\n                break;\n        }\n\n        return result;\n    }\n}\n\nmodule.exports = new FoodChain();"]}